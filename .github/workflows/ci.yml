name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            python-version: '3.8'
            rust-version: stable
          - os: ubuntu-latest
            python-version: '3.9'
            rust-version: stable
          - os: ubuntu-latest
            python-version: '3.10'
            rust-version: stable
          - os: ubuntu-latest
            python-version: '3.11'
            rust-version: stable
          - os: ubuntu-latest
            python-version: '3.12'
            rust-version: stable
          - os: ubuntu-latest
            python-version: '3.11'
            rust-version: beta
          - os: ubuntu-latest
            python-version: '3.11'
            rust-version: nightly
          - os: windows-latest
            python-version: '3.8'
            rust-version: stable
          - os: windows-latest
            python-version: '3.9'
            rust-version: stable
          - os: windows-latest
            python-version: '3.10'
            rust-version: stable
          - os: windows-latest
            python-version: '3.11'
            rust-version: stable
          - os: windows-latest
            python-version: '3.12'
            rust-version: stable
          - os: macos-latest
            python-version: '3.8'
            rust-version: stable
          - os: macos-latest
            python-version: '3.9'
            rust-version: stable
          - os: macos-latest
            python-version: '3.10'
            rust-version: stable
          - os: macos-latest
            python-version: '3.11'
            rust-version: stable
          - os: macos-latest
            python-version: '3.12'
            rust-version: stable

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust-version || 'stable' }}
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin pytest pytest-mock pytest-cov flake8 black

    - name: Check Rust formatting
      run: cargo fmt -- --check

    - name: Check Rust linting
      run: cargo clippy -- -D warnings

    - name: Run Rust tests
      run: cargo test --verbose

    - name: Build Python extension
      run: maturin develop --release

    - name: Run Python tests
      run: python -m pytest tests/ -v --cov=drainage --cov-report=xml

    - name: Check Python formatting
      run: black --check tests/ examples/

    - name: Check Python linting
      run: flake8 tests/ examples/ --max-line-length=100

    - name: Test examples
      run: |
        python -c "import drainage; print('drainage module imported successfully')"
        python -c "import examples.simple_analysis; print('examples imported successfully')"

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11' && matrix.rust-version == 'stable'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            python-version: '3.8'
          - os: ubuntu-latest
            python-version: '3.9'
          - os: ubuntu-latest
            python-version: '3.10'
          - os: ubuntu-latest
            python-version: '3.11'
          - os: ubuntu-latest
            python-version: '3.12'
          - os: windows-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.10'
          - os: windows-latest
            python-version: '3.11'
          - os: windows-latest
            python-version: '3.12'
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.10'
          - os: macos-latest
            python-version: '3.11'
          - os: macos-latest
            python-version: '3.12'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin

    - name: Build wheel
      run: maturin build --release

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheel-${{ matrix.os }}-py${{ matrix.python-version }}
        path: target/wheels/*.whl

  security:
    name: Security
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run Rust security audit
      run: cargo audit

    - name: Run Python security check
      run: safety check

    - name: Run Python security linting
      run: bandit -r tests/ examples/ -f json -o bandit-report.json || true

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: bandit-report.json

  performance:
    name: Performance
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin pytest-benchmark

    - name: Build Python extension
      run: maturin develop --release

    - name: Run performance tests
      run: python -m pytest tests/ -v --benchmark-only --benchmark-sort=mean

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin sphinx sphinx-rtd-theme

    - name: Build Python extension
      run: maturin develop --release

    - name: Generate Python documentation
      run: |
        python -c "import drainage; help(drainage)" > drainage_help.txt

    - name: Check documentation
      run: |
        python -c "import drainage; print(drainage.__doc__)"
        python -c "import drainage; print(drainage.analyze_table.__doc__)"

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: drainage_help.txt

  integration:
    name: Integration
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin pytest pytest-mock

    - name: Build Python extension
      run: maturin develop --release

    - name: Run integration tests
      run: python -m pytest tests/ -m integration -v

    - name: Test examples
      run: |
        python examples/simple_analysis.py --help || true
        python -c "import examples.simple_analysis; print('Examples imported successfully')"

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin twine

    - name: Build wheel
      run: maturin build --release

    - name: Check wheel
      run: twine check target/wheels/*.whl

    - name: Upload to PyPI
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload target/wheels/*.whl
